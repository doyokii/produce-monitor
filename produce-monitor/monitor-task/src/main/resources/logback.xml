<?xml version="1.0" encoding="UTF-8"?>
<!--
	debug="true" 	启动时输出配置加载信息
	scan="true" 	默认每分钟自动扫描
	scanPeriod="30 seconds" 	设置每30秒自动扫描,若没有指定具体单位则以milliseconds为标准(单位:milliseconds, seconds, minutes or hours)
-->
<configuration scan="true" scanPeriod="2 seconds">

    <contextName>MrzTestLogging</contextName>

    <property name="log.path" value="/Users/zzz/Desktop/logs"/>
    <!--项目名-->
    <property name="logback.project.name" value="produce-monitor"/>
    <!--日志模块名(如:默认(default),销售(sales),订单(orders)...)-->
    <property name="logback.logs.module.name" value="monitor-task"/>
    <timestamp key="byDay" datePattern="yyyyMMdd"/>
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志输出编码 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
            </pattern>
        </layout>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 该文件记录当天的日志，第二天这个文件中的昨天的内容会被放在一个单独的文件中，按照fileNamePattern命名格式的文件，这个文件保存当天的日志 -->
        <file>${log.path}/logs/all.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名,如果上面的file没有配置，那就一天一个文件-->
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${log.path}/logs/all-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保存近10天的日志 -->
            <maxHistory>10</maxHistory>
        </rollingPolicy>
        <!--
        当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
        必须配置timeBasedFileNamingAndTriggeringPolicy
        -->
<!--        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--            <maxFileSize>100MB</maxFileSize>-->
<!--        </timeBasedFileNamingAndTriggeringPolicy>-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </layout>
    </appender>

<!--    &lt;!&ndash;-->
<!--    logger主要用于存放日志对象，也可以定义日志类型、级别-->
<!--    name：表示匹配的logger类型前缀，也就是包的前半部分-->
<!--    level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR-->
<!--    additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效-->
<!--    &ndash;&gt;-->
    <logger name="org.springframework" level="INFO"/>
    <!--<logger name="org.hibernate" level="ERROR" />-->
    <!-- 日志输出级别 -->
    <root level="INFO">
        <!--<appender-ref ref="STDOUT"/>-->
        <!-- 启用日志文件记录日志 -->
        <appender-ref ref="FILE" />
        <appender-ref ref="STDOUT" />
    </root>
</configuration>